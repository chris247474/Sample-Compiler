// $ANTLR 3.3 Nov 30, 2010 12:45:30 C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g 2011-07-21 17:24:04

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

public class ScannerALT extends Lexer {
    public static final int EOF=-1;
    public static final int MULTILINE_COMMENT=4;
    public static final int STRING_LITERAL=5;
    public static final int CHAR_LITERAL=6;
    public static final int LETTER=7;
    public static final int DIGIT=8;
    public static final int INTEGER=9;
    public static final int EXPONENT=10;
    public static final int FLOAT=11;
    public static final int COMPAREOPS=12;
    public static final int LOGICALOPS=13;
    public static final int MATHOPS=14;
    public static final int ID=15;
    public static final int ARRAYID=16;
    public static final int ASSIGN=17;
    public static final int TERMINATOR=18;
    public static final int WS=19;
    public static final int COMMENT=20;

    // delegates
    // delegators

    public ScannerALT() {;} 
    public ScannerALT(CharStream input) {
        this(input, new RecognizerSharedState());
    }
    public ScannerALT(CharStream input, RecognizerSharedState state) {
        super(input,state);

    }
    public String getGrammarFileName() { return "C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g"; }

    // $ANTLR start "MULTILINE_COMMENT"
    public final void mMULTILINE_COMMENT() throws RecognitionException {
        try {
            int _type = MULTILINE_COMMENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:4:2: ( '/*' ( . )* '*/' )
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:4:4: '/*' ( . )* '*/'
            {
            match("/*"); 

            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:4:9: ( . )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0=='*') ) {
                    int LA1_1 = input.LA(2);

                    if ( (LA1_1=='/') ) {
                        alt1=2;
                    }
                    else if ( ((LA1_1>='\u0000' && LA1_1<='.')||(LA1_1>='0' && LA1_1<='\uFFFF')) ) {
                        alt1=1;
                    }


                }
                else if ( ((LA1_0>='\u0000' && LA1_0<=')')||(LA1_0>='+' && LA1_0<='\uFFFF')) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:4:9: .
            	    {
            	    matchAny(); 

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            match("*/"); 

            _channel = HIDDEN;

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MULTILINE_COMMENT"

    // $ANTLR start "STRING_LITERAL"
    public final void mSTRING_LITERAL() throws RecognitionException {
        try {
            int _type = STRING_LITERAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            int c;

            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:8:2: ( '\"' ( '\"' '\"' | c=~ ( '\"' | '\\r' | '\\n' ) )* '\"' )
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:8:4: '\"' ( '\"' '\"' | c=~ ( '\"' | '\\r' | '\\n' ) )* '\"'
            {
            match('\"'); 
             StringBuilder b = new StringBuilder(); 
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:10:3: ( '\"' '\"' | c=~ ( '\"' | '\\r' | '\\n' ) )*
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);

                if ( (LA2_0=='\"') ) {
                    int LA2_1 = input.LA(2);

                    if ( (LA2_1=='\"') ) {
                        alt2=1;
                    }


                }
                else if ( ((LA2_0>='\u0000' && LA2_0<='\t')||(LA2_0>='\u000B' && LA2_0<='\f')||(LA2_0>='\u000E' && LA2_0<='!')||(LA2_0>='#' && LA2_0<='\uFFFF')) ) {
                    alt2=2;
                }


                switch (alt2) {
            	case 1 :
            	    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:10:5: '\"' '\"'
            	    {
            	    match('\"'); 
            	    match('\"'); 
            	     b.appendCodePoint('"');

            	    }
            	    break;
            	case 2 :
            	    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:11:5: c=~ ( '\"' | '\\r' | '\\n' )
            	    {
            	    c= input.LA(1);
            	    if ( (input.LA(1)>='\u0000' && input.LA(1)<='\t')||(input.LA(1)>='\u000B' && input.LA(1)<='\f')||(input.LA(1)>='\u000E' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='\uFFFF') ) {
            	        input.consume();

            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        recover(mse);
            	        throw mse;}

            	     b.appendCodePoint(c);

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            match('\"'); 
             setText(b.toString()); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "STRING_LITERAL"

    // $ANTLR start "CHAR_LITERAL"
    public final void mCHAR_LITERAL() throws RecognitionException {
        try {
            int _type = CHAR_LITERAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:18:2: ( '\\'' . '\\'' )
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:18:4: '\\'' . '\\''
            {
            match('\''); 
            matchAny(); 
            match('\''); 
            setText(getText().substring(1,2));

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "CHAR_LITERAL"

    // $ANTLR start "LETTER"
    public final void mLETTER() throws RecognitionException {
        try {
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:23:2: ( ( 'a' .. 'z' | 'A' .. 'Z' ) )
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:23:4: ( 'a' .. 'z' | 'A' .. 'Z' )
            {
            if ( (input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "LETTER"

    // $ANTLR start "DIGIT"
    public final void mDIGIT() throws RecognitionException {
        try {
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:28:2: ( '0' .. '9' )
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:28:4: '0' .. '9'
            {
            matchRange('0','9'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "DIGIT"

    // $ANTLR start "INTEGER"
    public final void mINTEGER() throws RecognitionException {
        try {
            int _type = INTEGER;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:32:2: ( ( '-' )? DIGIT )
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:32:4: ( '-' )? DIGIT
            {
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:32:4: ( '-' )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0=='-') ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:32:4: '-'
                    {
                    match('-'); 

                    }
                    break;

            }

            mDIGIT(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "INTEGER"

    // $ANTLR start "FLOAT"
    public final void mFLOAT() throws RecognitionException {
        try {
            int _type = FLOAT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:36:2: ( ( '-' )? ( ( DIGIT )+ '.' ( DIGIT )+ ( EXPONENT )? | '.' ( DIGIT )+ ( EXPONENT )? | ( DIGIT )+ EXPONENT ) )
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:36:4: ( '-' )? ( ( DIGIT )+ '.' ( DIGIT )+ ( EXPONENT )? | '.' ( DIGIT )+ ( EXPONENT )? | ( DIGIT )+ EXPONENT )
            {
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:36:4: ( '-' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0=='-') ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:36:5: '-'
                    {
                    match('-'); 

                    }
                    break;

            }

            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:36:11: ( ( DIGIT )+ '.' ( DIGIT )+ ( EXPONENT )? | '.' ( DIGIT )+ ( EXPONENT )? | ( DIGIT )+ EXPONENT )
            int alt11=3;
            alt11 = dfa11.predict(input);
            switch (alt11) {
                case 1 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:36:12: ( DIGIT )+ '.' ( DIGIT )+ ( EXPONENT )?
                    {
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:36:12: ( DIGIT )+
                    int cnt5=0;
                    loop5:
                    do {
                        int alt5=2;
                        int LA5_0 = input.LA(1);

                        if ( ((LA5_0>='0' && LA5_0<='9')) ) {
                            alt5=1;
                        }


                        switch (alt5) {
                    	case 1 :
                    	    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:36:12: DIGIT
                    	    {
                    	    mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt5 >= 1 ) break loop5;
                                EarlyExitException eee =
                                    new EarlyExitException(5, input);
                                throw eee;
                        }
                        cnt5++;
                    } while (true);

                    match('.'); 
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:36:23: ( DIGIT )+
                    int cnt6=0;
                    loop6:
                    do {
                        int alt6=2;
                        int LA6_0 = input.LA(1);

                        if ( ((LA6_0>='0' && LA6_0<='9')) ) {
                            alt6=1;
                        }


                        switch (alt6) {
                    	case 1 :
                    	    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:36:23: DIGIT
                    	    {
                    	    mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt6 >= 1 ) break loop6;
                                EarlyExitException eee =
                                    new EarlyExitException(6, input);
                                throw eee;
                        }
                        cnt6++;
                    } while (true);

                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:36:30: ( EXPONENT )?
                    int alt7=2;
                    int LA7_0 = input.LA(1);

                    if ( (LA7_0=='E'||LA7_0=='e') ) {
                        alt7=1;
                    }
                    switch (alt7) {
                        case 1 :
                            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:36:30: EXPONENT
                            {
                            mEXPONENT(); 

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:37:4: '.' ( DIGIT )+ ( EXPONENT )?
                    {
                    match('.'); 
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:37:8: ( DIGIT )+
                    int cnt8=0;
                    loop8:
                    do {
                        int alt8=2;
                        int LA8_0 = input.LA(1);

                        if ( ((LA8_0>='0' && LA8_0<='9')) ) {
                            alt8=1;
                        }


                        switch (alt8) {
                    	case 1 :
                    	    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:37:8: DIGIT
                    	    {
                    	    mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt8 >= 1 ) break loop8;
                                EarlyExitException eee =
                                    new EarlyExitException(8, input);
                                throw eee;
                        }
                        cnt8++;
                    } while (true);

                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:37:15: ( EXPONENT )?
                    int alt9=2;
                    int LA9_0 = input.LA(1);

                    if ( (LA9_0=='E'||LA9_0=='e') ) {
                        alt9=1;
                    }
                    switch (alt9) {
                        case 1 :
                            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:37:15: EXPONENT
                            {
                            mEXPONENT(); 

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:38:4: ( DIGIT )+ EXPONENT
                    {
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:38:4: ( DIGIT )+
                    int cnt10=0;
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);

                        if ( ((LA10_0>='0' && LA10_0<='9')) ) {
                            alt10=1;
                        }


                        switch (alt10) {
                    	case 1 :
                    	    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:38:4: DIGIT
                    	    {
                    	    mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt10 >= 1 ) break loop10;
                                EarlyExitException eee =
                                    new EarlyExitException(10, input);
                                throw eee;
                        }
                        cnt10++;
                    } while (true);

                    mEXPONENT(); 

                    }
                    break;

            }


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "FLOAT"

    // $ANTLR start "EXPONENT"
    public final void mEXPONENT() throws RecognitionException {
        try {
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:43:2: ( ( 'e' | 'E' ) ( '+' | '-' )? ( DIGIT )+ )
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:43:4: ( 'e' | 'E' ) ( '+' | '-' )? ( DIGIT )+
            {
            if ( input.LA(1)=='E'||input.LA(1)=='e' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}

            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:43:14: ( '+' | '-' )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0=='+'||LA12_0=='-') ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:
                    {
                    if ( input.LA(1)=='+'||input.LA(1)=='-' ) {
                        input.consume();

                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        recover(mse);
                        throw mse;}


                    }
                    break;

            }

            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:43:25: ( DIGIT )+
            int cnt13=0;
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( ((LA13_0>='0' && LA13_0<='9')) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:43:25: DIGIT
            	    {
            	    mDIGIT(); 

            	    }
            	    break;

            	default :
            	    if ( cnt13 >= 1 ) break loop13;
                        EarlyExitException eee =
                            new EarlyExitException(13, input);
                        throw eee;
                }
                cnt13++;
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "EXPONENT"

    // $ANTLR start "COMPAREOPS"
    public final void mCOMPAREOPS() throws RecognitionException {
        try {
            int _type = COMPAREOPS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:47:2: ( '==' | '<>' | '>=' | '<=' | '>' | '<' | '!>' | '!<' )
            int alt14=8;
            alt14 = dfa14.predict(input);
            switch (alt14) {
                case 1 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:47:4: '=='
                    {
                    match("=="); 


                    }
                    break;
                case 2 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:47:11: '<>'
                    {
                    match("<>"); 


                    }
                    break;
                case 3 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:47:18: '>='
                    {
                    match(">="); 


                    }
                    break;
                case 4 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:47:25: '<='
                    {
                    match("<="); 


                    }
                    break;
                case 5 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:47:32: '>'
                    {
                    match('>'); 

                    }
                    break;
                case 6 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:47:38: '<'
                    {
                    match('<'); 

                    }
                    break;
                case 7 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:47:44: '!>'
                    {
                    match("!>"); 


                    }
                    break;
                case 8 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:47:51: '!<'
                    {
                    match("!<"); 


                    }
                    break;

            }
            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COMPAREOPS"

    // $ANTLR start "LOGICALOPS"
    public final void mLOGICALOPS() throws RecognitionException {
        try {
            int _type = LOGICALOPS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:51:2: ( '&&' | '||' | '!' )
            int alt15=3;
            switch ( input.LA(1) ) {
            case '&':
                {
                alt15=1;
                }
                break;
            case '|':
                {
                alt15=2;
                }
                break;
            case '!':
                {
                alt15=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }

            switch (alt15) {
                case 1 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:51:4: '&&'
                    {
                    match("&&"); 


                    }
                    break;
                case 2 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:51:11: '||'
                    {
                    match("||"); 


                    }
                    break;
                case 3 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:51:18: '!'
                    {
                    match('!'); 

                    }
                    break;

            }
            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "LOGICALOPS"

    // $ANTLR start "MATHOPS"
    public final void mMATHOPS() throws RecognitionException {
        try {
            int _type = MATHOPS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:55:2: ( '+' | '-' | '*' | '/' | '%' )
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:
            {
            if ( input.LA(1)=='%'||(input.LA(1)>='*' && input.LA(1)<='+')||input.LA(1)=='-'||input.LA(1)=='/' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "MATHOPS"

    // $ANTLR start "ASSIGN"
    public final void mASSIGN() throws RecognitionException {
        try {
            int _type = ASSIGN;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:59:2: ( ID '=' | ARRAYID '=' )
            int alt16=2;
            alt16 = dfa16.predict(input);
            switch (alt16) {
                case 1 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:59:4: ID '='
                    {
                    mID(); 
                    match('='); 

                    }
                    break;
                case 2 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:60:4: ARRAYID '='
                    {
                    mARRAYID(); 
                    match('='); 

                    }
                    break;

            }
            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ASSIGN"

    // $ANTLR start "ID"
    public final void mID() throws RecognitionException {
        try {
            int _type = ID;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:64:2: ( ( LETTER | '_' ) ( LETTER | DIGIT | '_' )* )
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:64:4: ( LETTER | '_' ) ( LETTER | DIGIT | '_' )*
            {
            if ( (input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}

            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:64:17: ( LETTER | DIGIT | '_' )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( ((LA17_0>='0' && LA17_0<='9')||(LA17_0>='A' && LA17_0<='Z')||LA17_0=='_'||(LA17_0>='a' && LA17_0<='z')) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:
            	    {
            	    if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {
            	        input.consume();

            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        recover(mse);
            	        throw mse;}


            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ID"

    // $ANTLR start "ARRAYID"
    public final void mARRAYID() throws RecognitionException {
        try {
            int _type = ARRAYID;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:68:2: ( ID '[' ID ']' | ID '[' INTEGER ']' )
            int alt18=2;
            alt18 = dfa18.predict(input);
            switch (alt18) {
                case 1 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:68:4: ID '[' ID ']'
                    {
                    mID(); 
                    match('['); 
                    mID(); 
                    match(']'); 

                    }
                    break;
                case 2 :
                    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:69:4: ID '[' INTEGER ']'
                    {
                    mID(); 
                    match('['); 
                    mINTEGER(); 
                    match(']'); 

                    }
                    break;

            }
            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "ARRAYID"

    // $ANTLR start "TERMINATOR"
    public final void mTERMINATOR() throws RecognitionException {
        try {
            int _type = TERMINATOR;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:73:2: ( ';' )
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:73:4: ';'
            {
            match(';'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "TERMINATOR"

    // $ANTLR start "WS"
    public final void mWS() throws RecognitionException {
        try {
            int _type = WS;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:77:2: ( ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+ )
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:77:4: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
            {
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:77:4: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
            int cnt19=0;
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( ((LA19_0>='\t' && LA19_0<='\n')||(LA19_0>='\f' && LA19_0<='\r')||LA19_0==' ') ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:
            	    {
            	    if ( (input.LA(1)>='\t' && input.LA(1)<='\n')||(input.LA(1)>='\f' && input.LA(1)<='\r')||input.LA(1)==' ' ) {
            	        input.consume();

            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        recover(mse);
            	        throw mse;}


            	    }
            	    break;

            	default :
            	    if ( cnt19 >= 1 ) break loop19;
                        EarlyExitException eee =
                            new EarlyExitException(19, input);
                        throw eee;
                }
                cnt19++;
            } while (true);

            _channel = HIDDEN;

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "WS"

    // $ANTLR start "COMMENT"
    public final void mCOMMENT() throws RecognitionException {
        try {
            int _type = COMMENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:81:2: ( '//' ( . )* ( '\\n' | '\\r' ) )
            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:81:4: '//' ( . )* ( '\\n' | '\\r' )
            {
            match("//"); 

            // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:81:9: ( . )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0=='\n'||LA20_0=='\r') ) {
                    alt20=2;
                }
                else if ( ((LA20_0>='\u0000' && LA20_0<='\t')||(LA20_0>='\u000B' && LA20_0<='\f')||(LA20_0>='\u000E' && LA20_0<='\uFFFF')) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:81:9: .
            	    {
            	    matchAny(); 

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            if ( input.LA(1)=='\n'||input.LA(1)=='\r' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}

            _channel = HIDDEN;

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "COMMENT"

    public void mTokens() throws RecognitionException {
        // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:1:8: ( MULTILINE_COMMENT | STRING_LITERAL | CHAR_LITERAL | INTEGER | FLOAT | COMPAREOPS | LOGICALOPS | MATHOPS | ASSIGN | ID | ARRAYID | TERMINATOR | WS | COMMENT )
        int alt21=14;
        alt21 = dfa21.predict(input);
        switch (alt21) {
            case 1 :
                // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:1:10: MULTILINE_COMMENT
                {
                mMULTILINE_COMMENT(); 

                }
                break;
            case 2 :
                // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:1:28: STRING_LITERAL
                {
                mSTRING_LITERAL(); 

                }
                break;
            case 3 :
                // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:1:43: CHAR_LITERAL
                {
                mCHAR_LITERAL(); 

                }
                break;
            case 4 :
                // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:1:56: INTEGER
                {
                mINTEGER(); 

                }
                break;
            case 5 :
                // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:1:64: FLOAT
                {
                mFLOAT(); 

                }
                break;
            case 6 :
                // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:1:70: COMPAREOPS
                {
                mCOMPAREOPS(); 

                }
                break;
            case 7 :
                // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:1:81: LOGICALOPS
                {
                mLOGICALOPS(); 

                }
                break;
            case 8 :
                // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:1:92: MATHOPS
                {
                mMATHOPS(); 

                }
                break;
            case 9 :
                // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:1:100: ASSIGN
                {
                mASSIGN(); 

                }
                break;
            case 10 :
                // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:1:107: ID
                {
                mID(); 

                }
                break;
            case 11 :
                // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:1:110: ARRAYID
                {
                mARRAYID(); 

                }
                break;
            case 12 :
                // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:1:118: TERMINATOR
                {
                mTERMINATOR(); 

                }
                break;
            case 13 :
                // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:1:129: WS
                {
                mWS(); 

                }
                break;
            case 14 :
                // C:\\Users\\Sonia Tan\\Desktop\\ScannerALT.g:1:132: COMMENT
                {
                mCOMMENT(); 

                }
                break;

        }

    }


    protected DFA11 dfa11 = new DFA11(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA21 dfa21 = new DFA21(this);
    static final String DFA11_eotS =
        "\5\uffff";
    static final String DFA11_eofS =
        "\5\uffff";
    static final String DFA11_minS =
        "\2\56\3\uffff";
    static final String DFA11_maxS =
        "\1\71\1\145\3\uffff";
    static final String DFA11_acceptS =
        "\2\uffff\1\2\1\1\1\3";
    static final String DFA11_specialS =
        "\5\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\2\1\uffff\12\1",
            "\1\3\1\uffff\12\1\13\uffff\1\4\37\uffff\1\4",
            "",
            "",
            ""
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "36:11: ( ( DIGIT )+ '.' ( DIGIT )+ ( EXPONENT )? | '.' ( DIGIT )+ ( EXPONENT )? | ( DIGIT )+ EXPONENT )";
        }
    }
    static final String DFA14_eotS =
        "\2\uffff\1\7\1\11\10\uffff";
    static final String DFA14_eofS =
        "\14\uffff";
    static final String DFA14_minS =
        "\1\41\1\uffff\2\75\1\74\7\uffff";
    static final String DFA14_maxS =
        "\1\76\1\uffff\1\76\1\75\1\76\7\uffff";
    static final String DFA14_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\1\4\1\6\1\3\1\5\1\7\1\10";
    static final String DFA14_specialS =
        "\14\uffff}>";
    static final String[] DFA14_transitionS = {
            "\1\4\32\uffff\1\2\1\1\1\3",
            "",
            "\1\6\1\5",
            "\1\10",
            "\1\13\1\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "46:1: COMPAREOPS : ( '==' | '<>' | '>=' | '<=' | '>' | '<' | '!>' | '!<' );";
        }
    }
    static final String DFA16_eotS =
        "\5\uffff";
    static final String DFA16_eofS =
        "\5\uffff";
    static final String DFA16_minS =
        "\1\101\2\60\2\uffff";
    static final String DFA16_maxS =
        "\3\172\2\uffff";
    static final String DFA16_acceptS =
        "\3\uffff\1\1\1\2";
    static final String DFA16_specialS =
        "\5\uffff}>";
    static final String[] DFA16_transitionS = {
            "\32\1\4\uffff\1\1\1\uffff\32\1",
            "\12\2\3\uffff\1\3\3\uffff\32\2\1\4\3\uffff\1\2\1\uffff\32"+
            "\2",
            "\12\2\3\uffff\1\3\3\uffff\32\2\1\4\3\uffff\1\2\1\uffff\32"+
            "\2",
            "",
            ""
    };

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "58:1: ASSIGN : ( ID '=' | ARRAYID '=' );";
        }
    }
    static final String DFA18_eotS =
        "\6\uffff";
    static final String DFA18_eofS =
        "\6\uffff";
    static final String DFA18_minS =
        "\1\101\2\60\1\55\2\uffff";
    static final String DFA18_maxS =
        "\4\172\2\uffff";
    static final String DFA18_acceptS =
        "\4\uffff\1\1\1\2";
    static final String DFA18_specialS =
        "\6\uffff}>";
    static final String[] DFA18_transitionS = {
            "\32\1\4\uffff\1\1\1\uffff\32\1",
            "\12\2\7\uffff\32\2\1\3\3\uffff\1\2\1\uffff\32\2",
            "\12\2\7\uffff\32\2\1\3\3\uffff\1\2\1\uffff\32\2",
            "\1\5\2\uffff\12\5\7\uffff\32\4\4\uffff\1\4\1\uffff\32\4",
            "",
            ""
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "67:1: ARRAYID : ( ID '[' ID ']' | ID '[' INTEGER ']' );";
        }
    }
    static final String DFA21_eotS =
        "\1\uffff\1\12\2\uffff\1\12\1\20\2\uffff\1\11\2\uffff\1\22\5\uffff"+
        "\1\22\7\uffff\2\33\1\uffff";
    static final String DFA21_eofS =
        "\34\uffff";
    static final String DFA21_minS =
        "\1\11\1\52\2\uffff\2\56\2\uffff\1\74\2\uffff\1\60\5\uffff\1\60"+
        "\2\uffff\1\55\2\60\1\135\1\60\2\75\1\uffff";
    static final String DFA21_maxS =
        "\1\174\1\57\2\uffff\1\71\1\145\2\uffff\1\76\2\uffff\1\172\5\uffff"+
        "\1\172\2\uffff\2\172\1\71\1\135\1\172\2\75\1\uffff";
    static final String DFA21_acceptS =
        "\2\uffff\1\2\1\3\2\uffff\1\5\1\6\1\uffff\1\7\1\10\1\uffff\1\14"+
        "\1\15\1\1\1\16\1\4\1\uffff\1\12\1\11\7\uffff\1\13";
    static final String DFA21_specialS =
        "\34\uffff}>";
    static final String[] DFA21_transitionS = {
            "\2\15\1\uffff\2\15\22\uffff\1\15\1\10\1\2\2\uffff\1\12\1\11"+
            "\1\3\2\uffff\2\12\1\uffff\1\4\1\6\1\1\12\5\1\uffff\1\14\3\7"+
            "\2\uffff\32\13\4\uffff\1\13\1\uffff\32\13\1\uffff\1\11",
            "\1\16\4\uffff\1\17",
            "",
            "",
            "\1\6\1\uffff\12\5",
            "\1\6\1\uffff\12\6\13\uffff\1\6\37\uffff\1\6",
            "",
            "",
            "\1\7\1\uffff\1\7",
            "",
            "",
            "\12\21\3\uffff\1\23\3\uffff\32\21\1\24\3\uffff\1\21\1\uffff"+
            "\32\21",
            "",
            "",
            "",
            "",
            "",
            "\12\21\3\uffff\1\23\3\uffff\32\21\1\24\3\uffff\1\21\1\uffff"+
            "\32\21",
            "",
            "",
            "\1\26\2\uffff\12\27\7\uffff\32\25\4\uffff\1\25\1\uffff\32"+
            "\25",
            "\12\30\7\uffff\32\30\2\uffff\1\31\1\uffff\1\30\1\uffff\32"+
            "\30",
            "\12\27",
            "\1\32",
            "\12\30\7\uffff\32\30\2\uffff\1\31\1\uffff\1\30\1\uffff\32"+
            "\30",
            "\1\23",
            "\1\23",
            ""
    };

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "1:1: Tokens : ( MULTILINE_COMMENT | STRING_LITERAL | CHAR_LITERAL | INTEGER | FLOAT | COMPAREOPS | LOGICALOPS | MATHOPS | ASSIGN | ID | ARRAYID | TERMINATOR | WS | COMMENT );";
        }
    }
 

}